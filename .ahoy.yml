---
ahoyapi: v2

commands:
  build:
    usage: Build or rebuild project.
    cmd: |
      ahoy clean \
      && if [ "$COMPOSE" != "composer.json" ]; then ahoy composer-merge; fi \
      && if [ "$COMPOSE" != "composer.json" ]; then ahoy link-module; fi \
      && (docker network prune -f > /dev/null && docker network inspect amazeeio-network > /dev/null || docker network create amazeeio-network) \
      && ahoy up -- --build --force-recreate \
      && ahoy install-dev \
      && ahoy install-site \
      && if [ "$COMPOSE" != "composer.json" ]; then ahoy install-module; fi \
      && ahoy drush en tide_test -y \
      && ahoy line "Build complete" \
      && ahoy info 1

  info:
    usage: Print information about this project.
    cmd: |
      ahoy line "Site URL              : " ${LOCALDEV_URL}
      ahoy line "Path to project       : " ${APP}
      ahoy line "Path to docroot       : " ${APP}/${WEBROOT}
      ahoy line "DB port on host       : " $(docker-compose port mariadb 3306 | cut -d : -f 2)
      ahoy line "Mailhog URL           : " http://mailhog.docker.amazee.io/
      if [ "$1" ]; then
        ahoy line "One-time login        : " $(ahoy login -- --no-browser)
      fi

  up:
    usage: Build and start Docker containers
    cmd: |
      docker-compose up -d "$@" \
      && ahoy cli "dockerize -wait tcp://mariadb:3306 -timeout 1m" \
      && if docker-compose logs | grep -q "\[Error\]"; then docker-compose logs; exit 1; fi \
      && docker ps -a --filter name=^/${COMPOSE_PROJECT_NAME}_

  down:
    usage: Stop Docker containers and remove container, images, volumes and networks.
    cmd: docker-compose down --volumes

  start:
    usage: Start existing Docker containers.
    cmd: docker-compose start "$@"

  stop:
    usage: Stop running Docker containers.
    cmd: docker-compose stop "$@"

  restart:
    usage: Restart all stopped and running Docker containers.
    cmd: docker-compose restart

  logs:
    usage: Show Docker logs.
    cmd: docker-compose logs "$@"

  pull:
    usage: Pull latest docker images.
    cmd: docker image ls --format \"{{.Repository}}:{{.Tag}}\" | grep amazeeio/ | grep -v none | xargs -n1 docker pull | cat

  cli:
    usage: Start a shell inside CLI container or run a command.
    cmd: if \[ "$@" \]; then docker-compose exec cli bash -c "$@"; else docker-compose exec cli bash; fi

  drush:
    usage: Run drush commands in the CLI service container.
    cmd: docker-compose exec -T cli drush -r ${APP}/${WEBROOT} -l ${LOCALDEV_URL} "$@"

  login:
    usage: Login to a website.
    cmd: ahoy drush uublk 1 -q && ahoy drush uli "$@"

  # @note: Call this on the host before starting containers.
  composer-merge:
    usage: Merge composer files
    cmd: scripts/composer-merge.sh

  install-dev:
    usage: Install dependencies.
    cmd: ahoy cli "composer install -n --ansi --prefer-dist --no-suggest"

  install-site:
    usage: Install site.
    cmd: |
      ahoy cli "chmod 777 ${APP}/${WEBROOT}/sites/default" \
      && ahoy cli "rm -f ${APP}/${WEBROOT}/sites/default/settings.php" \
      && ahoy cli "rm -f ${APP}/${WEBROOT}/sites/default/services.yml" \
      && ahoy drush si ${DRUPAL_PROFILE:-testing} -y --db-url=mysql://drupal:drupal@${MYSQL_HOST}/drupal --account-name=admin --account-pass=admin install_configure_form.enable_update_status_module=NULL install_configure_form.enable_update_status_emails=NULL

  link-module:
    usage: Link module from current repository root
    cmd: scripts/drupal-link-module.sh

  install-module:
    usage: Install a module from current repository root
    cmd: ahoy cli "INSTALL_SUGGEST=$INSTALL_SUGGEST scripts/drupal-install-module.sh"

  clean:
    usage: Remove all build files
    cmd: |
      ahoy down \
      && ([ -d .git ] && git ls-files --directory --other -i --exclude-from=.gitignore ${WEBROOT} | grep -v "settings.local.php" | grep -v "services.local.yml" | xargs chmod -Rf 777 || true) \
      && ([ -d .git ] && git ls-files --directory --other -i --exclude-from=.gitignore ${WEBROOT} | grep -v "settings.local.php" | grep -v "services.local.yml" | xargs rm -Rf || true) \
      && rm -Rf *.lock \
      && rm -Rf vendor \
      && rm -Rf screenshots

  clean-full:
    usage: Remove all development files
    cmd: |
      ahoy clean \
      && ([ -d .git ] && git ls-files --directory --other . | grep -v ".idea" | xargs chmod -Rf 777 || true) \
      && ([ -d .git ] && git ls-files --directory --other . | grep -v ".idea" | xargs rm -Rf || true)

  lint:
    usage: Lint code.
    cmd: ahoy cli "vendor/bin/phpcs ."

  test-behat:
    usage: Run Behat tests.
    cmd: ahoy cli "./vendor/bin/behat --strict --colors ${BEHAT_PROFILE} $@"

  # Utilities.
  line:
    cmd: printf "$(tput -Txterm setaf 2)${1}$(tput -Txterm sgr0)${2}\n"
    hide: true

entrypoint:
- bash
- "-c"
- |
  [ -f .env ] && export $(grep -v '^#' .env | xargs) && [ -f .env.local ] && export $(grep -v '^#' .env.local | xargs)
  export COMPOSER=${COMPOSER:-composer.build.json}
  bash -c "$0" "$@"
- '{{cmd}}'
- '{{name}}'
